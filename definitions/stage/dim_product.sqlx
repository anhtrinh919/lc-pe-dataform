config {
  type: "incremental",
  schema: "stage",
  uniqueKey: ["article_code"]
}

-- Priority for name + hierarchy: daily > b2b > monthly > stock
with s_daily as (
  select article_code,
         any_value(product_name) as product_name,
         any_value(division)     as division,
         any_value(department)   as department,
         any_value(fam_group)    as fam_group,
         any_value(family)       as family,
         any_value(sub_family)   as sub_family,
         min(sale_date) as first_seen,
         max(sale_date) as last_seen,
         1 as src_rank
  from ${ref("stage","stage_sales_daily")}
  group by article_code
),
s_b2b as (
  select article_code,
         any_value(product_name) as product_name,
         any_value(division)     as division,
         any_value(department)   as department,
         any_value(fam_group)    as fam_group,
         any_value(family)       as family,
         any_value(sub_family)   as sub_family,
         min(sale_date) as first_seen,
         max(sale_date) as last_seen,
         2 as src_rank
  from ${ref("stage","stage_b2b_sales_daily")}
  group by article_code
),
s_month as (
  select article_code,
         any_value(product_name) as product_name,
         any_value(division)     as division,
         any_value(department)   as department,
         any_value(fam_group)    as fam_group,
         any_value(family)       as family,
         any_value(sub_family)   as sub_family,
         min(sale_month) as first_seen,
         max(sale_month) as last_seen,
         3 as src_rank
  from ${ref("stage","stage_sales_monthly")}
  group by article_code
),
s_stock as (
  select article_code,
         cast(null as string) as product_name,
         cast(null as string) as division,
         cast(null as string) as department,
         cast(null as string) as fam_group,
         cast(null as string) as family,
         cast(null as string) as sub_family,
         min(stock_date) as first_seen,
         max(stock_date) as last_seen,
         4 as src_rank
  from ${ref("stage","stage_stock_daily")}
  group by article_code
),
all_src as (
  select * from s_daily
  union all
  select * from s_b2b
  union all
  select * from s_month
  union all
  select * from s_stock
),
picked as (
  select as value any_value(t) over (
    partition by article_code
    order by src_rank
    rows between unbounded preceding and unbounded following
  )
  from all_src t
)
select
  article_code,
  product_name,
  division, department, fam_group, family, sub_family,
  first_seen, last_seen
from picked

${when(incremental(),
`where article_code not in (select article_code from ${self()})`)}