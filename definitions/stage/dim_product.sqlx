config {
  type: "incremental",
  schema: "stage",
  uniqueKey: ["article_code"]
}

-- Priority: daily > b2b > monthly > stock
WITH s_daily AS (
  SELECT
    article_code,
    ANY_VALUE(product_name) AS product_name,
    ANY_VALUE(division)     AS division,
    ANY_VALUE(department)   AS department,
    ANY_VALUE(fam_group)    AS fam_group,
    ANY_VALUE(family)       AS family,
    ANY_VALUE(sub_family)   AS sub_family,
    MIN(sale_date) AS first_seen,
    MAX(sale_date) AS last_seen,
    1 AS src_rank
  FROM ${ref("stage","stage_sales_daily")}
  GROUP BY article_code
),
s_b2b AS (
  SELECT
    article_code,
    ANY_VALUE(product_name) AS product_name,
    ANY_VALUE(division)     AS division,
    ANY_VALUE(department)   AS department,
    ANY_VALUE(fam_group)    AS fam_group,
    ANY_VALUE(family)       AS family,
    ANY_VALUE(sub_family)   AS sub_family,
    MIN(sale_date) AS first_seen,
    MAX(sale_date) AS last_seen,
    2 AS src_rank
  FROM ${ref("stage","stage_b2b_sales_daily")}
  GROUP BY article_code
),
s_month AS (
  SELECT
    article_code,
    ANY_VALUE(product_name) AS product_name,
    ANY_VALUE(division)     AS division,
    ANY_VALUE(department)   AS department,
    ANY_VALUE(fam_group)    AS fam_group,
    ANY_VALUE(family)       AS family,
    ANY_VALUE(sub_family)   AS sub_family,
    MIN(DATE(SAFE.PARSE_DATE('%d/%m/%Y', CONCAT('01/', sale_month)))) AS first_seen,
    MAX(DATE(SAFE.PARSE_DATE('%d/%m/%Y', CONCAT('01/', sale_month)))) AS last_seen,
    3 AS src_rank
  FROM ${ref("stage","stage_sales_monthly")}
  GROUP BY article_code
),
s_stock AS (
  SELECT
    article_code,
    CAST(NULL AS STRING) AS product_name,
    CAST(NULL AS STRING) AS division,
    CAST(NULL AS STRING) AS department,
    CAST(NULL AS STRING) AS fam_group,
    CAST(NULL AS STRING) AS family,
    CAST(NULL AS STRING) AS sub_family,
    MIN(stock_date) AS first_seen,
    MAX(stock_date) AS last_seen,
    4 AS src_rank
  FROM ${ref("stage","stage_stock_daily")}
  GROUP BY article_code
),
all_src AS (
  SELECT * FROM s_daily
  UNION ALL
  SELECT * FROM s_b2b
  UNION ALL
  SELECT * FROM s_month
  UNION ALL
  SELECT * FROM s_stock
),
picked AS (
  SELECT AS VALUE ANY_VALUE(t) OVER (
    PARTITION BY article_code
    ORDER BY src_rank
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  )
  FROM all_src t
)
SELECT
  article_code,
  product_name,
  division, department, fam_group, family, sub_family,
  first_seen, last_seen
FROM picked

${when(incremental(),
`WHERE article_code NOT IN (SELECT article_code FROM ${self()})`)}
