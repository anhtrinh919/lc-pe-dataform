config {
  type: "view",
  schema: "marts",
  tags: ["exec","summary","monthly","agent"]
}

/*
Grain: month_start with flexible slices:
  - enterprise (all stores, all products)
  - store      (by store)
  - department (by product department)
Measures: qty, turnover, margin_value, gm%, MoM & YoY deltas/percent, ranks for movers
Source: marts.v_sales_360_monthly (already unified + conformed)
*/

WITH base AS (
  SELECT
    date AS month_start,
    store_id,
    store_name,
    department,
    qty,
    turnover,
    cost_value,
    margin_value,
    SAFE_DIVIDE(margin_value, NULLIF(turnover,0)) AS gm_percent
  FROM ${ref("v_sales_360_monthly")}
),

-- enterprise slice
s_enterprise AS (
  SELECT
    month_start,
    'enterprise' AS slice_level,
    'enterprise' AS slice_key,
    'enterprise' AS slice_label,
    SUM(qty)        AS qty,
    SUM(turnover)   AS turnover,
    SUM(cost_value) AS cost_value,
    SUM(margin_value) AS margin_value
  FROM base
  GROUP BY month_start
),

-- store slice
s_store AS (
  SELECT
    month_start,
    'store'        AS slice_level,
    CAST(store_id AS STRING) AS slice_key,
    ANY_VALUE(store_name)    AS slice_label,
    SUM(qty)        AS qty,
    SUM(turnover)   AS turnover,
    SUM(cost_value) AS cost_value,
    SUM(margin_value) AS margin_value
  FROM base
  GROUP BY month_start, slice_key
),

-- department slice
s_department AS (
  SELECT
    month_start,
    'department' AS slice_level,
    CAST(department AS STRING) AS slice_key,
    CAST(department AS STRING) AS slice_label,
    SUM(qty)        AS qty,
    SUM(turnover)   AS turnover,
    SUM(cost_value) AS cost_value,
    SUM(margin_value) AS margin_value
  FROM base
  GROUP BY month_start, slice_key, slice_label
),

unioned AS (
  SELECT * FROM s_enterprise
  UNION ALL
  SELECT * FROM s_store
  UNION ALL
  SELECT * FROM s_department
),

with_pct AS (
  SELECT
    u.*,
    SAFE_DIVIDE(u.margin_value, NULLIF(u.turnover,0)) AS gm_percent,

    -- MoM deltas (vs previous month for same slice)
    LAG(u.turnover, 1) OVER (PARTITION BY u.slice_level, u.slice_key ORDER BY u.month_start) AS turnover_prev,
    LAG(u.margin_value, 1) OVER (PARTITION BY u.slice_level, u.slice_key ORDER BY u.month_start) AS margin_prev,

    -- YoY deltas (vs same month previous year)
    LAG(u.turnover, 12) OVER (PARTITION BY u.slice_level, u.slice_key ORDER BY u.month_start) AS turnover_yago,
    LAG(u.margin_value, 12) OVER (PARTITION BY u.slice_level, u.slice_key ORDER BY u.month_start) AS margin_yago
  FROM unioned u
),

with_changes AS (
  SELECT
    *,
    (turnover - turnover_prev) AS mom_turnover_delta,
    SAFE_DIVIDE(turnover - turnover_prev, NULLIF(turnover_prev,0)) AS mom_turnover_pct,
    (margin_value - margin_prev) AS mom_margin_delta,
    SAFE_DIVIDE(margin_value - margin_prev, NULLIF(margin_prev,0)) AS mom_margin_pct,

    (turnover - turnover_yago) AS yoy_turnover_delta,
    SAFE_DIVIDE(turnover - turnover_yago, NULLIF(turnover_yago,0)) AS yoy_turnover_pct,
    (margin_value - margin_yago) AS yoy_margin_delta,
    SAFE_DIVIDE(margin_value - margin_yago, NULLIF(margin_yago,0)) AS yoy_margin_pct
  FROM with_pct
),

-- ranks within the month by slice_level (enterprise has 1 row → ranks will be 1; we’ll null them out later)
ranked AS (
  SELECT
    c.*,
    RANK() OVER (PARTITION BY c.month_start, c.slice_level ORDER BY c.mom_turnover_delta DESC) AS rank_mom_gain,
    RANK() OVER (PARTITION BY c.month_start, c.slice_level ORDER BY c.mom_turnover_delta ASC)  AS rank_mom_loss,
    RANK() OVER (PARTITION BY c.month_start, c.slice_level ORDER BY c.yoy_turnover_delta DESC) AS rank_yoy_gain,
    RANK() OVER (PARTITION BY c.month_start, c.slice_level ORDER BY c.yoy_turnover_delta ASC)  AS rank_yoy_loss
  FROM with_changes c
)

SELECT
  month_start,
  slice_level,
  slice_key,
  slice_label,

  qty,
  turnover,
  cost_value,
  margin_value,
  gm_percent,

  -- MoM
  mom_turnover_delta,
  mom_turnover_pct,
  mom_margin_delta,
  mom_margin_pct,

  -- YoY
  yoy_turnover_delta,
  yoy_turnover_pct,
  yoy_margin_delta,
  yoy_margin_pct,

  -- Ranks (null for enterprise)
  IF(slice_level = 'enterprise', NULL, rank_mom_gain) AS rank_mom_gain,
  IF(slice_level = 'enterprise', NULL, rank_mom_loss) AS rank_mom_loss,
  IF(slice_level = 'enterprise', NULL, rank_yoy_gain) AS rank_yoy_gain,
  IF(slice_level = 'enterprise', NULL, rank_yoy_loss) AS rank_yoy_loss
FROM ranked
ORDER BY month_start, slice_level, slice_label